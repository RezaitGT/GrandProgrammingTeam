from flask import Flask, render_template, request, jsonify
import os
import uuid
import io
from werkzeug.utils import secure_filename
import re
from datetime import datetime
from PIL import Image
from typing import List, Dict, Any

# –ü–æ–ø—Ä–æ–±—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å PyMuPDF, –µ—Å–ª–∏ –Ω–µ—Ç - –∏—Å–ø–æ–ª—å–∑—É–µ–º pdfplumber
try:
    import fitz  # PyMuPDF
    PYMUPDF_AVAILABLE = True
    print("‚úÖ PyMuPDF –¥–æ—Å—Ç—É–ø–µ–Ω")
except ImportError:
    PYMUPDF_AVAILABLE = False
    print("‚ö†Ô∏è PyMuPDF –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è pdfplumber")

try:
    import pdfplumber
    PDFPLUMBER_AVAILABLE = True
    print("‚úÖ PDFPlumber –¥–æ—Å—Ç—É–ø–µ–Ω")
except ImportError:
    PDFPLUMBER_AVAILABLE = False
    print("‚ö†Ô∏è PDFPlumber –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

app = Flask(__name__)
app.config['UPLOAD_FOLDER'] = 'uploads'
app.config['SECRET_KEY'] = 'normcontrol-secret-key-2024'
app.config['MAX_CONTENT_LENGTH'] = 16 * 1024 * 1024  # 16MB

# Ensure upload folder exists
os.makedirs(app.config['UPLOAD_FOLDER'], exist_ok=True)

# =============================================================================
# CONFIG - –ü—Ä–∞–≤–∏–ª–∞ –∏–∑ –¢–ó
# =============================================================================
class Config:
    TZ_RULES = {
        "title_block": {
            "rule_1.1.1": "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–π –Ω–∞–¥–ø–∏—Å–∏ –≤ —á–∞—Å—Ç–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –≥—Ä–∞—Ñ—ã 1 (–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –∏–∑–¥–µ–ª–∏—è –∏ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞, –µ—Å–ª–∏ —ç—Ç–æ–º—É –¥–æ–∫—É–º–µ–Ω—Ç—É –ø—Ä–∏—Å–≤–æ–µ–Ω –∫–æ–¥ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —ç—Ç–æ–≥–æ –∫–æ–¥–∞ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—é –¥–æ–∫—É–º–µ–Ω—Ç–∞)",
            "rule_1.1.3": "–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –±—É–∫–≤–µ–Ω–Ω—ã—Ö –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏–π –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è—Ö –∏ –Ω–∞ –ø–æ–ª–µ —á–µ—Ä—Ç–µ–∂–∞",
            "rule_1.1.4": "–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è '*', '**', '***' –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è—Ö —á–µ—Ä—Ç–µ–∂–∞ –∏ –Ω–∞ –µ–≥–æ –ø–æ–ª–µ (–ª—é–±–æ–π —Ñ–æ—Ä–º–∞—Ç –∏ –Ω–∞ –ª—é–±–æ–º –ª–∏—Å—Ç–µ —á–µ—Ä—Ç–µ–∂–∞)"
        }
    }

# =============================================================================
# DOCUMENT ANALYZER - –£–õ–£–ß–®–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –° –†–ê–ó–ë–ò–í–ö–û–ô –ù–ê –ë–õ–û–ö–ò
# =============================================================================
class DocumentAnalyzer:
    """
    –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä PDF –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –¢–ó
    """
    
    def __init__(self):
        # –ü–æ–ª–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –∫–æ–¥–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏–∑ –¢–ó
        self.document_codes = {
            # –ß–µ—Ä—Ç–µ–∂–∏
            '–°–ë': '–°–±–æ—Ä–æ—á–Ω—ã–π —á–µ—Ä—Ç–µ–∂',
            '–í–û': '–ß–µ—Ä—Ç–µ–∂ –æ–±—â–µ–≥–æ –≤–∏–¥–∞', 
            '–¢–ß': '–¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–π —á–µ—Ä—Ç–µ–∂',
            '–ì–ß': '–ì–∞–±–∞—Ä–∏—Ç–Ω—ã–π —á–µ—Ä—Ç–µ–∂',
            '–ú–≠': '–≠–ª–µ–∫—Ç—Ä–æ–º–æ–Ω—Ç–∞–∂–Ω—ã–π —á–µ—Ä—Ç–µ–∂',
            '–ú–ß': '–ú–æ–Ω—Ç–∞–∂–Ω—ã–π —á–µ—Ä—Ç–µ–∂',
            '–£–ß': '–£–ø–∞–∫–æ–≤–æ—á–Ω—ã–π —á–µ—Ä—Ç–µ–∂',
            
            # –í–µ–¥–æ–º–æ—Å—Ç–∏
            '–í–°': '–í–µ–¥–æ–º–æ—Å—Ç—å —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–π',
            '–í–î': '–í–µ–¥–æ–º–æ—Å—Ç—å —Å—Å—ã–ª–æ—á–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤',
            '–í–ü': '–í–µ–¥–æ–º–æ—Å—Ç—å –ø–æ–∫—É–ø–Ω—ã—Ö –∏–∑–¥–µ–ª–∏–π',
            '–í–ò': '–í–µ–¥–æ–º–æ—Å—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø–æ–∫—É–ø–Ω—ã—Ö –∏–∑–¥–µ–ª–∏–π',
            '–î–ü': '–í–µ–¥–æ–º–æ—Å—Ç—å –¥–µ—Ä–∂–∞—Ç–µ–ª–µ–π –ø–æ–¥–ª–∏–Ω–Ω–∏–∫–æ–≤',
            '–ü–¢': '–í–µ–¥–æ–º–æ—Å—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è',
            '–≠–ü': '–í–µ–¥–æ–º–æ—Å—Ç—å —ç—Å–∫–∏–∑–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞',
            '–¢–ü': '–í–µ–¥–æ–º–æ—Å—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞',
            '–í–î–≠': '–í–µ–¥–æ–º–æ—Å—Ç—å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤',
            
            # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
            '–ü–ó': '–ü–æ—è—Å–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–ø–∏—Å–∫–∞',
            '–¢–£': '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —É—Å–ª–æ–≤–∏—è',
            '–ü–ú': '–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∏ –º–µ—Ç–æ–¥–∏–∫–∞ –∏—Å–ø—ã—Ç–∞–Ω–∏–π',
            '–¢–ë': '–¢–∞–±–ª–∏—Ü—ã',
            '–†–†': '–†–∞—Å—á–µ—Ç—ã',
            '–†–≠': '–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏',
            '–ò–ú': '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –º–æ–Ω—Ç–∞–∂—É, –ø—É—Å–∫—É, —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏—é –∏ –æ–±–∫–∞—Ç–∫–µ –∏–∑–¥–µ–ª–∏—è',
            '–§–û': '–§–æ—Ä–º—É–ª—è—Ä',
            '–ü–°': '–ü–∞—Å–ø–æ—Ä—Ç',
            '–≠–¢': '–≠—Ç–∏–∫–µ—Ç–∫–∞',
            '–ö–ò': '–ö–∞—Ç–∞–ª–æ–≥ –∏–∑–¥–µ–ª–∏—è',
            '–ù–ó–ß': '–ù–æ—Ä–º—ã —Ä–∞—Å—Ö–æ–¥–∞ –∑–∞–ø–∞—Å–Ω—ã—Ö —á–∞—Å—Ç–µ–π',
            '–ù–ú': '–ù–æ—Ä–º—ã —Ä–∞—Å—Ö–æ–¥–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤',
            '–ó–ò': '–í–µ–¥–æ–º–æ—Å—Ç—å –ó–ò–ü',
            '–£–ü': '–£—á–µ–±–Ω–æ-—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø–ª–∞–∫–∞—Ç—ã',
            '–ò–°': '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ',
            '–í–≠': '–í–µ–¥–æ–º–æ—Å—Ç—å —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–æ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤',
            
            # –†–µ–º–æ–Ω—Ç–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
            '–†–ö': '–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ —Ä–µ–º–æ–Ω—Ç—É',
            '–†–°': '–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ —Ä–µ–º–æ–Ω—Ç—É',
            '–£–ö': '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —É—Å–ª–æ–≤–∏—è –Ω–∞ —Ä–µ–º–æ–Ω—Ç',
            '–£–°': '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —É—Å–ª–æ–≤–∏—è –Ω–∞ —Ä–µ–º–æ–Ω—Ç',
            '–ó–ö': '–ù–æ—Ä–º—ã —Ä–∞—Å—Ö–æ–¥–∞ –∑–∞–ø–∞—Å–Ω—ã—Ö —á–∞—Å—Ç–µ–π –Ω–∞ —Ä–µ–º–æ–Ω—Ç',
            '–ó–°': '–ù–æ—Ä–º—ã —Ä–∞—Å—Ö–æ–¥–∞ –∑–∞–ø–∞—Å–Ω—ã—Ö —á–∞—Å—Ç–µ–π –Ω–∞ —Ä–µ–º–æ–Ω—Ç',
            '–ú–ö': '–ù–æ—Ä–º—ã —Ä–∞—Å—Ö–æ–¥–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –Ω–∞ —Ä–µ–º–æ–Ω—Ç',
            '–ú–°': '–ù–æ—Ä–º—ã —Ä–∞—Å—Ö–æ–¥–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –Ω–∞ —Ä–µ–º–æ–Ω—Ç',
            '–ó–ò–ö': '–í–µ–¥–æ–º–æ—Å—Ç—å –ó–ò–ü –Ω–∞ —Ä–µ–º–æ–Ω—Ç',
            '–ó–ò–°': '–í–µ–¥–æ–º–æ—Å—Ç—å –ó–ò–ü –Ω–∞ —Ä–µ–º–æ–Ω—Ç',
            '–í–†–ö': '–í–µ–¥–æ–º–æ—Å—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Ä–µ–º–æ–Ω—Ç–∞',
            '–í–†–°': '–í–µ–¥–æ–º–æ—Å—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Ä–µ–º–æ–Ω—Ç–∞'
        }
        
        self.scheme_codes = {
            # –≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–µ —Å—Ö–µ–º—ã
            '–≠1': '–°—Ö–µ–º–∞ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω–∞—è',
            '–≠2': '–°—Ö–µ–º–∞ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è', 
            '–≠3': '–°—Ö–µ–º–∞ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∞—è –ø—Ä–∏–Ω—Ü–∏–ø–∏–∞–ª—å–Ω–∞—è',
            '–≠4': '–°—Ö–µ–º–∞ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∞—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π',
            '–≠5': '–°—Ö–µ–º–∞ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∞—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è',
            '–≠6': '–°—Ö–µ–º–∞ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∞—è –æ–±—â–∞—è',
            '–≠7': '–°—Ö–µ–º–∞ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∞—è —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è',
            
            # –ì–∏–¥—Ä–∞–≤–ª–∏—á–µ—Å–∫–∏–µ —Å—Ö–µ–º—ã
            '–ì1': '–°—Ö–µ–º–∞ –≥–∏–¥—Ä–∞–≤–ª–∏—á–µ—Å–∫–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω–∞—è',
            '–ì3': '–°—Ö–µ–º–∞ –≥–∏–¥—Ä–∞–≤–ª–∏—á–µ—Å–∫–∞—è –ø—Ä–∏–Ω—Ü–∏–ø–∏–∞–ª—å–Ω–∞—è',
            '–ì4': '–°—Ö–µ–º–∞ –≥–∏–¥—Ä–∞–≤–ª–∏—á–µ—Å–∫–∞—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è',
            
            # –ü–Ω–µ–≤–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å—Ö–µ–º—ã
            '–ü1': '–°—Ö–µ–º–∞ –ø–Ω–µ–≤–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω–∞—è',
            '–ü3': '–°—Ö–µ–º–∞ –ø–Ω–µ–≤–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–∏–Ω—Ü–∏–ø–∏–∞–ª—å–Ω–∞—è', 
            '–ü4': '–°—Ö–µ–º–∞ –ø–Ω–µ–≤–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è',
            
            # –ì–∞–∑–æ–≤—ã–µ —Å—Ö–µ–º—ã
            '–•1': '–°—Ö–µ–º–∞ –≥–∞–∑–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω–∞—è',
            '–•3': '–°—Ö–µ–º–∞ –≥–∞–∑–æ–≤–∞—è –ø—Ä–∏–Ω—Ü–∏–ø–∏–∞–ª—å–Ω–∞—è',
            '–•4': '–°—Ö–µ–º–∞ –≥–∞–∑–æ–≤–∞—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è',
            
            # –ö–∏–Ω–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å—Ö–µ–º—ã
            '–ö1': '–°—Ö–µ–º–∞ –∫–∏–Ω–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω–∞—è',
            '–ö2': '–°—Ö–µ–º–∞ –∫–∏–Ω–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è',
            '–ö3': '–°—Ö–µ–º–∞ –∫–∏–Ω–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–∏–Ω—Ü–∏–ø–∏–∞–ª—å–Ω–∞—è',
            
            # –í–∞–∫—É—É–º–Ω—ã–µ —Å—Ö–µ–º—ã
            '–í1': '–°—Ö–µ–º–∞ –≤–∞–∫—É—É–º–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω–∞—è',
            '–í3': '–°—Ö–µ–º–∞ –≤–∞–∫—É—É–º–Ω–∞—è –ø—Ä–∏–Ω—Ü–∏–ø–∏–∞–ª—å–Ω–∞—è',
            '–í4': '–°—Ö–µ–º–∞ –≤–∞–∫—É—É–º–Ω–∞—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π',
            
            # –û–ø—Ç–∏—á–µ—Å–∫–∏–µ —Å—Ö–µ–º—ã
            '–õ3': '–°—Ö–µ–º–∞ –æ–ø—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–∏–Ω—Ü–∏–ø–∏–∞–ª—å–Ω–∞—è',
            
            # –≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–µ —Å—Ö–µ–º—ã
            '–†1': '–°—Ö–µ–º–∞ —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω–∞—è',
            '–†2': '–°—Ö–µ–º–∞ —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è',
            '–†3': '–°—Ö–µ–º–∞ —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–∏–Ω—Ü–∏–ø–∏–∞–ª—å–Ω–∞—è',
            '–†4': '–°—Ö–µ–º–∞ —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∞—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π',
            '–†5': '–°—Ö–µ–º–∞ —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è',
            '–†6': '–°—Ö–µ–º–∞ —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∞—è –æ–±—â–∞—è',
            '–†7': '–°—Ö–µ–º–∞ —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è'
        }
    
    def get_all_document_codes(self) -> dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –∫–æ–¥—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
        return {**self.document_codes, **self.scheme_codes}
    
    def extract_text_from_pdf(self, pdf_path: str) -> dict:
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–∑ PDF —Å —Ä–∞–∑–±–∏–≤–∫–æ–π –Ω–∞ –±–ª–æ–∫–∏
        """
        print(f"\nüîç –ò–ó–í–õ–ï–ß–ï–ù–ò–ï –¢–ï–ö–°–¢–ê –ò–ó PDF –° –†–ê–ó–ë–ò–í–ö–û–ô –ù–ê –ë–õ–û–ö–ò")
        print("=" * 80)
        
        text_data = self._try_extraction_methods(pdf_path)
        
        # –†–ê–ó–ë–ò–í–ê–ï–ú –ù–ê –ë–õ–û–ö–ò
        text_data = self._split_into_blocks(text_data)
        
        self._print_detailed_content(text_data)
        
        print("=" * 80)
        print("‚úÖ –ò–ó–í–õ–ï–ß–ï–ù–ò–ï –¢–ï–ö–°–¢–ê –° –†–ê–ó–ë–ò–í–ö–û–ô –ù–ê –ë–õ–û–ö–ò –ó–ê–í–ï–†–®–ï–ù–û")
        print("=" * 80)
        
        return text_data
    
    def _split_into_blocks(self, text_data: dict) -> dict:
        """
        –†–∞–∑–±–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ –±–ª–æ–∫–∏: —á–µ—Ä—Ç–µ–∂, –æ–ø–∏—Å–∞–Ω–∏–µ, —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
        """
        print("\nüìã –†–ê–ó–ë–ò–í–ö–ê –î–û–ö–£–ú–ï–ù–¢–ê –ù–ê –ë–õ–û–ö–ò:")
    
        all_text = ""
        for page in text_data.get('pages', []):
            all_text += page.get('text', '') + "\n"
    
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–ª–æ–∫–∏
        drawing_block = ""
        description_block = ""
        structure_block = ""
    
        lines = all_text.split('\n')
    
        # –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å—ã –∫–ª—é—á–µ–≤—ã—Ö –º–∞—Ä–∫–µ—Ä–æ–≤
        massa_index = -1
        id_version_index = -1
    
        for i, line in enumerate(lines):
            line_clean = line.strip()
        
            if "–ú–∞—Å—Å–∞" in line_clean and massa_index == -1:
                massa_index = i
                print(f"üìç –ù–∞–π–¥–µ–Ω –º–∞—Ä–∫–µ—Ä '–ú–∞—Å—Å–∞' –≤ —Å—Ç—Ä–æ–∫–µ {i + 1}")
        
            if "ID –≤–µ—Ä—Å–∏–∏:" in line_clean and id_version_index == -1:
                id_version_index = i
                print(f"üìç –ù–∞–π–¥–µ–Ω –º–∞—Ä–∫–µ—Ä 'ID –≤–µ—Ä—Å–∏–∏:' –≤ —Å—Ç—Ä–æ–∫–µ {i + 1}")
    
        # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ –±–ª–æ–∫–∞–º
        if massa_index != -1 and id_version_index != -1:
            # –ß–µ—Ä—Ç–µ–∂: –≤—Å—ë –î–û "–ú–∞—Å—Å–∞"
            drawing_block = "\n".join(lines[:massa_index]).strip()
        
            # –°—Ç—Ä—É–∫—Ç—É—Ä–∞: –º–µ–∂–¥—É "–ú–∞—Å—Å–∞" –∏ "ID –≤–µ—Ä—Å–∏–∏:"
            structure_block = "\n".join(lines[massa_index:id_version_index]).strip()
        
            # –û–ø–∏—Å–∞–Ω–∏–µ: –≤—Å—ë –ü–û–°–õ–ï "ID –≤–µ—Ä—Å–∏–∏:"
            description_block = "\n".join(lines[id_version_index:]).strip()
        
            print("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –≤—Å–µ —Ç—Ä–∏ –±–ª–æ–∫–∞")
        
        elif massa_index != -1:
            # –ï—Å—Ç—å —Ç–æ–ª—å–∫–æ "–ú–∞—Å—Å–∞", –Ω–æ –Ω–µ—Ç "ID –≤–µ—Ä—Å–∏–∏:"
            drawing_block = "\n".join(lines[:massa_index]).strip()
            structure_block = "\n".join(lines[massa_index:]).strip()
            print("‚ö†Ô∏è –ú–∞—Ä–∫–µ—Ä 'ID –≤–µ—Ä—Å–∏–∏:' –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ–ø–∏—Å–∞–Ω–∏–µ –ø—É—Å—Ç–æ–µ")
        
        elif id_version_index != -1:
            # –ï—Å—Ç—å —Ç–æ–ª—å–∫–æ "ID –≤–µ—Ä—Å–∏–∏:", –Ω–æ –Ω–µ—Ç "–ú–∞—Å—Å–∞"
            drawing_block = "\n".join(lines[:id_version_index]).strip()
            description_block = "\n".join(lines[id_version_index:]).strip()
            print("‚ö†Ô∏è –ú–∞—Ä–∫–µ—Ä '–ú–∞—Å—Å–∞' –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—É—Å—Ç–∞—è")
        
        else:
            # –ù–µ—Ç –º–∞—Ä–∫–µ—Ä–æ–≤ - –≤–µ—Å—å —Ç–µ–∫—Å—Ç –≤ —á–µ—Ä—Ç–µ–∂
            drawing_block = all_text.strip()
            print("‚ö†Ô∏è –ú–∞—Ä–∫–µ—Ä—ã '–ú–∞—Å—Å–∞' –∏ 'ID –≤–µ—Ä—Å–∏–∏:' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
        # –î–æ–±–∞–≤–ª—è–µ–º –±–ª–æ–∫–∏ –≤ text_data
        text_data['blocks'] = {
            'drawing': drawing_block,
            'description': description_block,
            'structure': structure_block
        }
    
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –±–ª–æ–∫–∞–º
        print(f"üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–õ–û–ö–û–í:")
        print(f"   –ß–µ—Ä—Ç–µ–∂: {len(drawing_block)} —Å–∏–º–≤–æ–ª–æ–≤, {len(drawing_block.split())} —Å–ª–æ–≤")
        print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {len(description_block)} —Å–∏–º–≤–æ–ª–æ–≤, {len(description_block.split())} —Å–ª–æ–≤") 
        print(f"   –°—Ç—Ä—É–∫—Ç—É—Ä–∞: {len(structure_block)} —Å–∏–º–≤–æ–ª–æ–≤, {len(structure_block.split())} —Å–ª–æ–≤")
    
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –±–ª–æ–∫–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        if drawing_block:
            print(f"\nüìê –°–û–î–ï–†–ñ–ò–ú–û–ï –ß–ï–†–¢–ï–ñ–ê (–ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤):")
            print(f"   {drawing_block[:200]}...")
    
        if structure_block:
            print(f"\nüèóÔ∏è –°–û–î–ï–†–ñ–ò–ú–û–ï –°–¢–†–£–ö–¢–£–†–´ (–ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤):")
            print(f"   {structure_block[:200]}...")
    
        if description_block:
            print(f"\nüìù –°–û–î–ï–†–ñ–ò–ú–û–ï –û–ü–ò–°–ê–ù–ò–Ø (–ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤):")
            print(f"   {description_block[:200]}...")
    
        return text_data
    
    def _try_extraction_methods(self, pdf_path: str) -> dict:
        """–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Ä–∞–∑–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞"""
        methods = [
            ("PyMuPDF", self._extract_with_pymupdf),
            ("PDFPlumber", self._extract_with_pdfplumber),
        ]
        
        for method_name, method_func in methods:
            print(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ –º–µ—Ç–æ–¥–∞: {method_name}")
            try:
                text_data = method_func(pdf_path)
                if self._has_significant_text(text_data):
                    print(f"‚úÖ {method_name} —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ–∫ —Ç–µ–∫—Å—Ç")
                    return text_data
            except Exception as e:
                print(f"‚ùå {method_name} –æ—à–∏–±–∫–∞: {e}")
        
        print("‚ùå –ú–µ—Ç–æ–¥—ã –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏")
        return self._create_empty_text_data()
    
    def _extract_with_pymupdf(self, pdf_path: str) -> dict:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º PyMuPDF"""
        doc = fitz.open(pdf_path)
        text_data = {
            'pages': [],
            'metadata': doc.metadata,
            'total_pages': doc.page_count,
            'extraction_method': 'PyMuPDF'
        }
        
        for page_num in range(doc.page_count):
            page = doc[page_num]
            text = page.get_text()
            
            page_data = {
                'page_number': page_num + 1,
                'text': text,
                'blocks': [],
                'width': page.rect.width,
                'height': page.rect.height,
            }
            
            text_data['pages'].append(page_data)
        
        doc.close()
        return text_data
    
    def _extract_with_pdfplumber(self, pdf_path: str) -> dict:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º PDFPlumber"""
        text_data = {
            'pages': [],
            'total_pages': 0,
            'extraction_method': 'PDFPlumber'
        }
        
        with pdfplumber.open(pdf_path) as pdf:
            text_data['total_pages'] = len(pdf.pages)
            text_data['metadata'] = {
                'producer': getattr(pdf.metadata, 'producer', ''),
                'creator': getattr(pdf.metadata, 'creator', ''),
            }
            
            for page_num, page in enumerate(pdf.pages):
                text = page.extract_text() or ""
                
                page_data = {
                    'page_number': page_num + 1,
                    'text': text,
                    'blocks': [],
                    'width': page.width,
                    'height': page.height,
                }
                text_data['pages'].append(page_data)
        
        return text_data
    
    def _print_detailed_content(self, text_data: dict):
        """–í—ã–≤–æ–¥ –≤—Å–µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ PDF"""
        print(f"üìä –û–ë–©–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:")
        print(f"   –°—Ç—Ä–∞–Ω–∏—Ü: {text_data.get('total_pages', 0)}")
        
        for page in text_data.get('pages', []):
            page_text = page.get('text', '').strip()
            
            print(f"\nüìÑ –°–¢–†–ê–ù–ò–¶–ê {page['page_number']}:")
            print("-" * 60)
            
            if page_text:
                print(page_text)
            else:
                print("[–¢–ï–ö–°–¢ –û–¢–°–£–¢–°–¢–í–£–ï–¢]")
            
            print("-" * 60)
    
    def _has_significant_text(self, text_data: dict) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∑–Ω–∞—á–∏–º–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
        total_chars = 0
        for page in text_data.get('pages', []):
            total_chars += len(page.get('text', ''))
        return total_chars > 10
    
    def _create_empty_text_data(self) -> dict:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—É—Å—Ç–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö"""
        return {
            'pages': [],
            'total_pages': 0,
            'metadata': {},
            'extraction_method': 'None',
            'blocks': {
                'drawing': '',
                'description': '', 
                'structure': ''
            }
        }

# =============================================================================
# RULE ENGINE - –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –ë–ï–ó 1.1.2
# =============================================================================
class RuleEngine:
    def __init__(self):
        self.tz_rules = Config.TZ_RULES
        self.document_analyzer = DocumentAnalyzer()
        
    def check_title_block_requirements(self, text_data: dict) -> list:
        """
        1.1.1 –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–π –Ω–∞–¥–ø–∏—Å–∏ –≤ —á–∞—Å—Ç–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –≥—Ä–∞—Ñ—ã 1
        (–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –∏–∑–¥–µ–ª–∏—è –∏ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞, –µ—Å–ª–∏ —ç—Ç–æ–º—É –¥–æ–∫—É–º–µ–Ω—Ç—É –ø—Ä–∏—Å–≤–æ–µ–Ω –∫–æ–¥ 
        –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —ç—Ç–æ–≥–æ –∫–æ–¥–∞ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—é –¥–æ–∫—É–º–µ–Ω—Ç–∞)
        """
        print(f"\nüîç –ü–†–û–í–ï–†–ö–ê 1.1.1: –û–°–ù–û–í–ù–ê–Ø –ù–ê–î–ü–ò–°–¨ - –ì–†–ê–§–ê 1")
        print("=" * 60)
        
        violations = []
        all_text = ""
        for page in text_data.get('pages', []):
            all_text += page.get('text', '') + "\n"
        
        print(f"üìä –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞: {len(all_text)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –ü–æ–∏—Å–∫ –∫–æ–¥–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –†–ù–ê–¢.301276.001–°–ë –∏–ª–∏ –ê–ë–í–ì.123456.002
        document_code_match = re.search(r'[–ê-–Ø]{2,4}\.[0-9]+\.[0-9]+([–ê-–Ø]{2,3})', all_text)
        
        if document_code_match:
            full_code = document_code_match.group(0)
            found_code = document_code_match.group(1)
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω –∫–æ–¥ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {full_code}")
            print(f"‚úÖ –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–æ–¥–∞: {found_code}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∫–æ–¥–∞ –∏ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è
            code_check = self._check_document_code_compliance(all_text, found_code, full_code)
            if code_check:
                violations.append(code_check)
        else:
            # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∫–æ–¥ –±–µ–∑ —Å—É—Ñ—Ñ–∏–∫—Å–∞
            document_code_match = re.search(r'[–ê-–Ø]{2,4}\.[0-9]+\.[0-9]+', all_text)
            if document_code_match:
                full_code = document_code_match.group(0)
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω –∫–æ–¥ –¥–æ–∫—É–º–µ–Ω—Ç–∞ (–±–µ–∑ —Å—É—Ñ—Ñ–∏–∫—Å–∞): {full_code}")
                print("‚ö†Ô∏è –°—É—Ñ—Ñ–∏–∫—Å –∫–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞")
            else:
                print("‚ùå –ö–æ–¥ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                violations.append({
                    'rule_id': '1.1.1_code_missing',
                    'rule_text': self.tz_rules['title_block']['rule_1.1.1'],
                    'violation': '–ö–æ–¥ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –Ω–∞–¥–ø–∏—Å–∏',
                    'location': '–û—Å–Ω–æ–≤–Ω–∞—è –Ω–∞–¥–ø–∏—Å—å - –≥—Ä–∞—Ñ–∞ 1',
                    'severity': 'high',
                    'recommendation': '–î–æ–±–∞–≤—å—Ç–µ –∫–æ–¥ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –†–ù–ê–¢.301276.001–°–ë'
                })
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –∏–∑–¥–µ–ª–∏—è
        product_name_check = self._check_product_name(all_text)
        if product_name_check:
            violations.append(product_name_check)
        
        print(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ 1.1.1 –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ù–∞—Ä—É—à–µ–Ω–∏–π: {len(violations)}")
        print("=" * 60)
        return violations
    
    def _check_document_code_compliance(self, text: str, found_code: str, full_code: str) -> dict:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∫–æ–¥–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏ –µ–≥–æ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è"""
        all_codes = self.document_analyzer.get_all_document_codes()
        
        if found_code in all_codes:
            expected_name = all_codes[found_code]
            print(f"‚úÖ –û–∂–∏–¥–∞–µ–º–æ–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¥–ª—è –∫–æ–¥–∞ {found_code}: {expected_name}")
            
            # –ü–æ–∏—Å–∫ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ —Ç–µ–∫—Å—Ç–µ
            name_found = False
            for name_variant in [expected_name, expected_name.replace('–∞—è', '–∞—è').replace('–∏–π', '–∏–π')]:
                if name_variant.upper() in text.upper():
                    name_found = True
                    print(f"‚úÖ –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –Ω–∞–π–¥–µ–Ω–æ: {name_variant}")
                    break
            
            if not name_found:
                return {
                    'rule_id': '1.1.1_code_mismatch',
                    'rule_text': self.tz_rules['title_block']['rule_1.1.1'],
                    'violation': f'–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–¥—É {found_code}',
                    'location': '–û—Å–Ω–æ–≤–Ω–∞—è –Ω–∞–¥–ø–∏—Å—å - –≥—Ä–∞—Ñ–∞ 1',
                    'severity': 'high',
                    'recommendation': f'–ò–∑–º–µ–Ω–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –Ω–∞ "{expected_name}" –∏–ª–∏ –∏—Å–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥ –¥–æ–∫—É–º–µ–Ω—Ç–∞',
                    'details': f'–ö–æ–¥: {full_code}, –æ–∂–∏–¥–∞–µ–º–æ–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: {expected_name}'
                }
        else:
            print(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–æ–¥ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {found_code}")
            return {
                'rule_id': '1.1.1_unknown_code',
                'rule_text': self.tz_rules['title_block']['rule_1.1.1'],
                'violation': f'–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–æ–¥ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {found_code}',
                'location': '–û—Å–Ω–æ–≤–Ω–∞—è –Ω–∞–¥–ø–∏—Å—å - –≥—Ä–∞—Ñ–∞ 1', 
                'severity': 'medium',
                'recommendation': '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–¥ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–∑ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞',
                'details': f'–û–±–Ω–∞—Ä—É–∂–µ–Ω –∫–æ–¥: {full_code}'
            }
        
        return None
    
    def _check_product_name(self, text: str) -> dict:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –∏–∑–¥–µ–ª–∏—è"""
        # –ò—â–µ–º –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∏–∑–¥–µ–ª–∏—è –≤ —Ç–µ–∫—Å—Ç–µ (–æ–±—ã—á–Ω–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Ä—è–¥–æ–º —Å –∫–æ–¥–æ–º)
        lines = text.split('\n')
        for i, line in enumerate(lines):
            line_clean = line.strip()
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
            if any(marker in line_clean for marker in ['–ú–∞—Å—Å–∞', '–ú–∞—Å—à—Ç–∞–±', '–õ–∏—Å—Ç', '–ò–∑–º.', '‚Ññ –¥–æ–∫—É–º.', '–†–∞–∑—Ä–∞–±.', '–ü—Ä–æ–≤.']):
                continue
            
            # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ–º –∏–∑–¥–µ–ª–∏—è
            if (len(line_clean) > 5 and 
                not re.search(r'\d', line_clean) and  # –±–µ–∑ —Ü–∏—Ñ—Ä
                not re.search(r'[–ê-–Ø]{2,4}\.\d+\.\d+', line_clean) and  # –Ω–µ –∫–æ–¥ –¥–æ–∫—É–º–µ–Ω—Ç–∞
                line_clean not in ['', '–ê–û "–û–ö–ë–ú –ê—Ñ—Ä–∏–∫–∞–Ω—Ç–æ–≤"', '–ò–Ω–≤. ‚Ññ –ø–æ–¥–ª.', '–ü–æ–¥–ø. –∏ –¥–∞—Ç–∞']):
                print(f"‚úÖ –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∏–∑–¥–µ–ª–∏—è –Ω–∞–π–¥–µ–Ω–æ: '{line_clean}'")
                return None
        
        print("‚ùå –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∏–∑–¥–µ–ª–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return {
            'rule_id': '1.1.1_product_name',
            'rule_text': self.tz_rules['title_block']['rule_1.1.1'],
            'violation': '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∏–∑–¥–µ–ª–∏—è –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ',
            'location': '–û—Å–Ω–æ–≤–Ω–∞—è –Ω–∞–¥–ø–∏—Å—å - –≥—Ä–∞—Ñ–∞ 1',
            'severity': 'high',
            'recommendation': '–î–æ–±–∞–≤—å—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∏–∑–¥–µ–ª–∏—è –≤ –æ—Å–Ω–æ–≤–Ω—É—é –Ω–∞–¥–ø–∏—Å—å'
        }

    def check_letter_designations_consistency(self, text_data: dict) -> list:
        """
        1.1.3 –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –±—É–∫–≤–µ–Ω–Ω—ã—Ö –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏–π –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è—Ö –∏ –Ω–∞ –ø–æ–ª–µ —á–µ—Ä—Ç–µ–∂–∞
        –í–°–ï –∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã –∏–∑ —á–µ—Ä—Ç–µ–∂–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω–æ —Å—Ç–æ—è—â–∏–µ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏
        """
        print(f"\nüîç –ü–†–û–í–ï–†–ö–ê 1.1.3: –ë–£–ö–í–ï–ù–ù–´–ï –û–ë–û–ó–ù–ê–ß–ï–ù–ò–Ø")
        print("=" * 60)
        
        violations = []
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–ª–æ–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        drawing_block = text_data.get('blocks', {}).get('drawing', '')
        description_block = text_data.get('blocks', {}).get('description', '')
        
        print(f"üìä –ê–Ω–∞–ª–∏–∑ –±–ª–æ–∫–æ–≤:")
        print(f"   –ß–µ—Ä—Ç–µ–∂: {len(drawing_block)} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {len(description_block)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –ò—â–µ–º –í–°–ï –∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã –≤ –±–ª–æ–∫–µ —á–µ—Ä—Ç–µ–∂–∞
        capital_letters_in_drawing = self._find_all_capital_letters(drawing_block)
        print(f"‚úÖ –ó–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã –Ω–∞ —á–µ—Ä—Ç–µ–∂–µ: {', '.join(capital_letters_in_drawing) if capital_letters_in_drawing else '–Ω–µ –Ω–∞–π–¥–µ–Ω—ã'}")
        
        # –ò—â–µ–º —Ç–æ–ª—å–∫–æ –û–¢–î–ï–õ–¨–ù–û –°–¢–û–Ø–©–ò–ï –∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã –≤ –±–ª–æ–∫–µ –æ–ø–∏—Å–∞–Ω–∏—è
        standalone_letters_in_description = self._find_standalone_capital_letters(description_block)
        print(f"‚úÖ –û—Ç–¥–µ–ª—å–Ω–æ —Å—Ç–æ—è—â–∏–µ –±—É–∫–≤—ã –≤ –æ–ø–∏—Å–∞–Ω–∏–∏: {', '.join(standalone_letters_in_description) if standalone_letters_in_description else '–Ω–µ –Ω–∞–π–¥–µ–Ω—ã'}")
        
        # –ï—Å–ª–∏ –≤ —á–µ—Ä—Ç–µ–∂–µ –Ω–µ—Ç –∑–∞–≥–ª–∞–≤–Ω—ã—Ö –±—É–∫–≤ - –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞
        if not capital_letters_in_drawing:
            print("‚úÖ –ó–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —á–µ—Ä—Ç–µ–∂–µ - –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞")
            return violations
        
        # –ï—Å–ª–∏ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –Ω–µ—Ç –æ—Ç–¥–µ–ª—å–Ω–æ —Å—Ç–æ—è—â–∏—Ö –±—É–∫–≤, –Ω–æ –≤ —á–µ—Ä—Ç–µ–∂–µ –µ—Å—Ç—å - –æ—à–∏–±–∫–∞
        if not standalone_letters_in_description:
            print(f"‚ùå –í —á–µ—Ä—Ç–µ–∂–µ –µ—Å—Ç—å –∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã, –Ω–æ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –Ω–µ—Ç –æ—Ç–¥–µ–ª—å–Ω–æ —Å—Ç–æ—è—â–∏—Ö –±—É–∫–≤: {', '.join(capital_letters_in_drawing)}")
            violations.append({
                'rule_id': '1.1.3_no_standalone_letters_in_description',
                'rule_text': self.tz_rules['title_block']['rule_1.1.3'],
                'violation': f'–í —á–µ—Ä—Ç–µ–∂–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã, –Ω–æ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ—Ç–¥–µ–ª—å–Ω–æ —Å—Ç–æ—è—â–∏–µ –±—É–∫–≤–µ–Ω–Ω—ã–µ –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è',
                'location': '–ë–ª–æ–∫ –æ–ø–∏—Å–∞–Ω–∏—è',
                'severity': 'medium',
                'recommendation': '–î–æ–±–∞–≤—å—Ç–µ –≤ –æ–ø–∏—Å–∞–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ —Å—Ç–æ—è—â–∏–µ –±—É–∫–≤–µ–Ω–Ω—ã–µ –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –∑–∞–≥–ª–∞–≤–Ω—ã—Ö –±—É–∫–≤ –∏–∑ —á–µ—Ä—Ç–µ–∂–∞',
                'details': f'–ó–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã –≤ —á–µ—Ä—Ç–µ–∂–µ: {", ".join(capital_letters_in_drawing)}'
            })
            return violations
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –í–°–ï –∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã –∏–∑ —á–µ—Ä—Ç–µ–∂–∞ –µ—Å—Ç—å –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω–æ —Å—Ç–æ—è—â–∏–µ
        print(f"\nüîç –ü–†–û–í–ï–†–ö–ê –°–û–í–ü–ê–î–ï–ù–ò–Ø –ë–£–ö–í:")
        
        drawing_letters_set = set(capital_letters_in_drawing)
        description_letters_set = set(standalone_letters_in_description)
        
        # –ù–∞—Ö–æ–¥–∏–º –±—É–∫–≤—ã, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ —á–µ—Ä—Ç–µ–∂–µ, –Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –æ–ø–∏—Å–∞–Ω–∏–∏
        missing_in_description = drawing_letters_set - description_letters_set
        common_letters = drawing_letters_set & description_letters_set
        
        if not missing_in_description:
            print(f"‚úÖ –í—Å–µ –∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã –∏–∑ —á–µ—Ä—Ç–µ–∂–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω–æ —Å—Ç–æ—è—â–∏–µ: {', '.join(sorted(common_letters))}")
        else:
            print(f"‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã –∏–∑ —á–µ—Ä—Ç–µ–∂–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω–æ —Å—Ç–æ—è—â–∏–µ!")
            print(f"   –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –æ–ø–∏—Å–∞–Ω–∏–∏: {', '.join(sorted(missing_in_description))}")
            print(f"   –ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –æ–±–æ–∏—Ö: {', '.join(sorted(common_letters)) if common_letters else '–Ω–µ—Ç'}")
            print(f"   –í—Å–µ –æ—Ç–¥–µ–ª—å–Ω–æ —Å—Ç–æ—è—â–∏–µ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏: {', '.join(sorted(description_letters_set))}")
            
            violations.append({
                'rule_id': '1.1.3_letters_missing_in_description',
                'rule_text': self.tz_rules['title_block']['rule_1.1.3'],
                'violation': f'–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã –∏–∑ —á–µ—Ä—Ç–µ–∂–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω–æ —Å—Ç–æ—è—â–∏–µ –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è',
                'location': '–ë–ª–æ–∫ –æ–ø–∏—Å–∞–Ω–∏—è',
                'severity': 'medium',
                'recommendation': '–î–æ–±–∞–≤—å—Ç–µ –≤ –æ–ø–∏—Å–∞–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ —Å—Ç–æ—è—â–∏–µ –±—É–∫–≤–µ–Ω–Ω—ã–µ –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –∑–∞–≥–ª–∞–≤–Ω—ã—Ö –±—É–∫–≤ –∏–∑ —á–µ—Ä—Ç–µ–∂–∞',
                'details': f'–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –æ–ø–∏—Å–∞–Ω–∏–∏: {", ".join(sorted(missing_in_description))}; –ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç: {", ".join(sorted(common_letters)) if common_letters else "–Ω–µ—Ç"}'
            })
        
        print(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ 1.1.3 –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ù–∞—Ä—É—à–µ–Ω–∏–π: {len(violations)}")
        print("=" * 60)
        return violations

    def check_asterisk_consistency(self, text_data: dict) -> list:
        """
        1.1.4 –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è '*', '**', '***' –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è—Ö —á–µ—Ä—Ç–µ–∂–∞ –∏ –Ω–∞ –µ–≥–æ –ø–æ–ª–µ
        –î–æ–ª–∂–Ω—ã —Å–æ–≤–ø–∞–¥–∞—Ç—å –¢–ò–ü–´ –∑–≤–µ–∑–¥–æ—á–µ–∫ –≤ –±–ª–æ–∫–∞—Ö —á–µ—Ä—Ç–µ–∂–∞ –∏ –æ–ø–∏—Å–∞–Ω–∏—è
        """
        print(f"\nüîç –ü–†–û–í–ï–†–ö–ê 1.1.4: –ó–í–ï–ó–î–û–ß–ö–ò (*, **, ***)")
        print("=" * 60)
        
        violations = []
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–ª–æ–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        drawing_block = text_data.get('blocks', {}).get('drawing', '')
        description_block = text_data.get('blocks', {}).get('description', '')
        
        print(f"üìä –ê–Ω–∞–ª–∏–∑ –±–ª–æ–∫–æ–≤:")
        print(f"   –ß–µ—Ä—Ç–µ–∂: {len(drawing_block)} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {len(description_block)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –ò—â–µ–º –∑–≤–µ–∑–¥–æ—á–∫–∏ –≤ –±–ª–æ–∫–µ —á–µ—Ä—Ç–µ–∂–∞
        asterisks_in_drawing = self._find_asterisks_by_type(drawing_block)
        print(f"‚úÖ –ó–≤–µ–∑–¥–æ—á–∫–∏ –Ω–∞ —á–µ—Ä—Ç–µ–∂–µ: {asterisks_in_drawing}")
        
        # –ò—â–µ–º –∑–≤–µ–∑–¥–æ—á–∫–∏ –≤ –±–ª–æ–∫–µ –æ–ø–∏—Å–∞–Ω–∏—è
        asterisks_in_description = self._find_asterisks_by_type(description_block)
        print(f"‚úÖ –ó–≤–µ–∑–¥–æ—á–∫–∏ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏: {asterisks_in_description}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∑–≤–µ–∑–¥–æ—á–∫–∞—Ö
        print(f"\nüîç –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ó–í–ï–ó–î–û–ß–ï–ö:")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ö–ê–ö–ò–ï —Ç–∏–ø—ã –∑–≤–µ–∑–¥–æ—á–µ–∫ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ –∫–∞–∂–¥–æ–º –±–ª–æ–∫–µ
        drawing_types_used = [ast_type for ast_type, count in asterisks_in_drawing.items() if count > 0]
        description_types_used = [ast_type for ast_type, count in asterisks_in_description.items() if count > 0]
        
        print(f"   –¢–∏–ø—ã –∑–≤–µ–∑–¥–æ—á–µ–∫ –Ω–∞ —á–µ—Ä—Ç–µ–∂–µ: {', '.join(drawing_types_used) if drawing_types_used else '–Ω–µ—Ç'}")
        print(f"   –¢–∏–ø—ã –∑–≤–µ–∑–¥–æ—á–µ–∫ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏: {', '.join(description_types_used) if description_types_used else '–Ω–µ—Ç'}")
        
        # –ï—Å–ª–∏ –∑–≤–µ–∑–¥–æ—á–µ–∫ –Ω–µ—Ç –≤–æ–æ–±—â–µ –≤ –æ–±–æ–∏—Ö –±–ª–æ–∫–∞—Ö - –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞
        if not drawing_types_used and not description_types_used:
            print("‚úÖ –ó–≤–µ–∑–¥–æ—á–∫–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –≤ –æ–±–æ–∏—Ö –±–ª–æ–∫–∞—Ö - –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞")
            return violations
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–¨ —Ç–∏–ø–æ–≤ –∑–≤–µ–∑–¥–æ—á–µ–∫
        print(f"\nüîç –ü–†–û–í–ï–†–ö–ê –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò –¢–ò–ü–û–í:")
        
        # –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –∑–≤–µ–∑–¥–æ—á–µ–∫ - –æ—à–∏–±–∫–∞
        if drawing_types_used and description_types_used:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            drawing_set = set(drawing_types_used)
            description_set = set(description_types_used)
            
            if drawing_set == description_set:
                print(f"‚úÖ –¢–∏–ø—ã –∑–≤–µ–∑–¥–æ—á–µ–∫ —Å–æ–≤–ø–∞–¥–∞—é—Ç: {', '.join(drawing_types_used)}")
            else:
                print(f"‚ùå –¢–∏–ø—ã –∑–≤–µ–∑–¥–æ—á–µ–∫ –ù–ï —Å–æ–≤–ø–∞–¥–∞—é—Ç!")
                print(f"   –ù–∞ —á–µ—Ä—Ç–µ–∂–µ: {', '.join(drawing_types_used)}")
                print(f"   –í –æ–ø–∏—Å–∞–Ω–∏–∏: {', '.join(description_types_used)}")
                
                violations.append({
                    'rule_id': '1.1.4_type_mismatch',
                    'rule_text': self.tz_rules['title_block']['rule_1.1.4'],
                    'violation': f'–¢–∏–ø—ã –∑–≤–µ–∑–¥–æ—á–µ–∫ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç –º–µ–∂–¥—É —á–µ—Ä—Ç–µ–∂–æ–º –∏ –æ–ø–∏—Å–∞–Ω–∏–µ–º',
                    'location': '–ë–ª–æ–∫–∏ —á–µ—Ä—Ç–µ–∂–∞ –∏ –æ–ø–∏—Å–∞–Ω–∏—è',
                    'severity': 'medium',
                    'recommendation': '–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ —Ç–∏–ø—ã –∑–≤–µ–∑–¥–æ—á–µ–∫ (*, **, ***) –≤ —á–µ—Ä—Ç–µ–∂–µ –∏ –æ–ø–∏—Å–∞–Ω–∏–∏',
                    'details': f'–ù–∞ —á–µ—Ä—Ç–µ–∂–µ: {", ".join(drawing_types_used)}; –í –æ–ø–∏—Å–∞–Ω–∏–∏: {", ".join(description_types_used)}'
                })
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª—É—á–∞–∏, –∫–æ–≥–¥–∞ –∑–≤–µ–∑–¥–æ—á–∫–∏ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ –≤ –æ–¥–Ω–æ–º –±–ª–æ–∫–µ
        elif drawing_types_used and not description_types_used:
            print(f"‚ùå –ó–≤–µ–∑–¥–æ—á–∫–∏ –µ—Å—Ç—å –Ω–∞ —á–µ—Ä—Ç–µ–∂–µ, –Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –æ–ø–∏—Å–∞–Ω–∏–∏: {', '.join(drawing_types_used)}")
            violations.append({
                'rule_id': '1.1.4_asterisks_only_in_drawing',
                'rule_text': self.tz_rules['title_block']['rule_1.1.4'],
                'violation': f'–ó–≤–µ–∑–¥–æ—á–∫–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–∞ —á–µ—Ä—Ç–µ–∂–µ, –Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –æ–ø–∏—Å–∞–Ω–∏–∏',
                'location': '–ë–ª–æ–∫ –æ–ø–∏—Å–∞–Ω–∏—è',
                'severity': 'medium',
                'recommendation': '–î–æ–±–∞–≤—å—Ç–µ –∑–≤–µ–∑–¥–æ—á–∫–∏ –≤ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ —É–¥–∞–ª–∏—Ç–µ –∏—Ö —Å —á–µ—Ä—Ç–µ–∂–∞',
                'details': f'–¢–∏–ø—ã –∑–≤–µ–∑–¥–æ—á–µ–∫ –Ω–∞ —á–µ—Ä—Ç–µ–∂–µ: {", ".join(drawing_types_used)}'
            })
        
        elif description_types_used and not drawing_types_used:
            print(f"‚ùå –ó–≤–µ–∑–¥–æ—á–∫–∏ –µ—Å—Ç—å –≤ –æ–ø–∏—Å–∞–Ω–∏–∏, –Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–∞ —á–µ—Ä—Ç–µ–∂–µ: {', '.join(description_types_used)}")
            violations.append({
                'rule_id': '1.1.4_asterisks_only_in_description',
                'rule_text': self.tz_rules['title_block']['rule_1.1.4'],
                'violation': f'–ó–≤–µ–∑–¥–æ—á–∫–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –æ–ø–∏—Å–∞–Ω–∏–∏, –Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–∞ —á–µ—Ä—Ç–µ–∂–µ',
                'location': '–ë–ª–æ–∫ —á–µ—Ä—Ç–µ–∂–∞',
                'severity': 'medium',
                'recommendation': '–î–æ–±–∞–≤—å—Ç–µ –∑–≤–µ–∑–¥–æ—á–∫–∏ –Ω–∞ —á–µ—Ä—Ç–µ–∂ –∏–ª–∏ —É–¥–∞–ª–∏—Ç–µ –∏—Ö –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è',
                'details': f'–¢–∏–ø—ã –∑–≤–µ–∑–¥–æ—á–µ–∫ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏: {", ".join(description_types_used)}'
            })
        
        print(f"\nüìã –ò–¢–û–ì–ò –ü–†–û–í–ï–†–ö–ò 1.1.4")
        print(f"   –ù–∞–π–¥–µ–Ω–æ –Ω–∞—Ä—É—à–µ–Ω–∏–π: {len(violations)}")
        print(f"   –°—Ç–∞—Ç—É—Å: {'–ù–ï –°–û–û–¢–í–ï–¢–°–¢–í–£–ï–¢' if violations else '–°–û–û–¢–í–ï–¢–°–¢–í–£–ï–¢'}")
        
        print("=" * 60)
        return violations

    def _find_all_capital_letters(self, text: str) -> List[str]:
        """
        –ü–æ–∏—Å–∫ –í–°–ï–• –∑–∞–≥–ª–∞–≤–Ω—ã—Ö –±—É–∫–≤ –≤ —Ç–µ–∫—Å—Ç–µ (–ª—é–±—ã—Ö)
        """
        if not text:
            return []
        
        # –ò—â–µ–º –≤—Å–µ –∑–∞–≥–ª–∞–≤–Ω—ã–µ —Ä—É—Å—Å–∫–∏–µ –∏ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã
        capital_letters = re.findall(r'[–ê-–ØA-Z]', text)
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–ª–∏—à–∫–æ–º —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–µ –±—É–∫–≤—ã, –∫–æ—Ç–æ—Ä—ã–µ –æ–±—ã—á–Ω–æ –Ω–µ —è–≤–ª—è—é—Ç—Å—è –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è–º–∏
        common_text_letters = {'–ò',  '–ù', '–û', '–°',  '–ö', 'I', '–ï', '–¢', '–†', '–ú', '–ü', '–õ', '–î', '–ì', '–£',  '–´', '–Ø', '–ó', '–ô', '–§', '–•', '–¶', '–ß', '–®', '–©', '–™', '–¨', '–≠', '–Æ'}
        
        filtered_letters = [letter for letter in capital_letters if letter not in common_text_letters]
        
        return sorted(list(set(filtered_letters)))  # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã

    def _find_standalone_capital_letters(self, text: str) -> List[str]:
        """
        –ü–æ–∏—Å–∫ —Ç–æ–ª—å–∫–æ –û–¢–î–ï–õ–¨–ù–û –°–¢–û–Ø–©–ò–• –∑–∞–≥–ª–∞–≤–Ω—ã—Ö –±—É–∫–≤ –≤ —Ç–µ–∫—Å—Ç–µ
        """
        found_letters = set()
        
        if not text:
            return []
        
        # 1. –ë—É–∫–≤–∞ –º–µ–∂–¥—É –ø—Ä–æ–±–µ–ª–∞–º–∏: " A ", " B " (–Ω–æ –Ω–µ –∫–∞–∫ —á–∞—Å—Ç—å —Å–ª–æ–≤–∞)
        standalone_pattern1 = r'(?<!\w)[–ê-–ØA-Z](?!\w)'
        matches1 = re.findall(standalone_pattern1, f" {text} ")
        for letter in matches1:
            if len(letter) == 1:
                found_letters.add(letter)
        
        # 2. –ë—É–∫–≤–∞ –≤ —Å–∫–æ–±–∫–∞—Ö: "(A)", "(B)"
        bracket_pattern = r'\(([–ê-–ØA-Z])\)'
        matches2 = re.findall(bracket_pattern, text)
        for letter in matches2:
            if len(letter) == 1:
                found_letters.add(letter)
        
        # 3. –ë—É–∫–≤–∞ —Å —Ç–æ—á–∫–æ–π: "A.", "B." (–Ω–æ –Ω–µ –∫–∞–∫ —á–∞—Å—Ç—å —Å–ª–æ–≤–∞)
        dot_pattern = r'(?<!\w)[–ê-–ØA-Z]\.'
        matches3 = re.findall(dot_pattern, text)
        for match in matches3:
            letter = match.replace('.', '')
            if len(letter) == 1:
                found_letters.add(letter)
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–ª–∏—à–∫–æ–º —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–µ –±—É–∫–≤—ã
        common_text_letters = {'–ò',  '–ù', '–û', '–°',  '–ö', 'I', '–ï', '–¢', '–†', '–ú', '–ü', '–õ', '–î', '–ì', '–£',  '–´', '–Ø', '–ó', '–ô', '–§', '–•', '–¶', '–ß', '–®', '–©', '–™', '–¨', '–≠', '–Æ'}
        filtered_letters = {letter for letter in found_letters if letter not in common_text_letters}
        
        return sorted(list(filtered_letters))

    def _find_asterisks_by_type(self, text: str) -> dict:
        """–ü–æ–∏—Å–∫ –∑–≤–µ–∑–¥–æ—á–µ–∫ –ø–æ —Ç–∏–ø–∞–º —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        if not text:
            return {'single': 0, 'double': 0, 'triple': 0}
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º lookahead –∏ lookbehind —á—Ç–æ–±—ã —Ä–∞–∑–ª–∏—á–∞—Ç—å —Ç–∏–ø—ã –∑–≤–µ–∑–¥–æ—á–µ–∫
        single_asterisks = len(re.findall(r'(?<!\*)\*(?!\*)', text))
        double_asterisks = len(re.findall(r'(?<!\*)\*\*(?!\*)', text))  
        triple_asterisks = len(re.findall(r'(?<!\*)\*\*\*(?!\*)', text))
        
        return {
            'single': single_asterisks,
            'double': double_asterisks,
            'triple': triple_asterisks
        }
    
    def run_all_checks(self, document_data: dict) -> dict:
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ –∏–∑ –¢–ó"""
        all_violations = []
        
        text_data = document_data.get('text_data', {})
        
        print("üéØ –ó–ê–ü–£–°–ö –ü–†–û–í–ï–†–û–ö –ò–ó –¢–ó:")
        print("   1.1.1 - –û—Å–Ω–æ–≤–Ω–∞—è –Ω–∞–¥–ø–∏—Å—å (–∫–æ–¥ –∏ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ)")
        print("   1.1.3 - –ë—É–∫–≤–µ–Ω–Ω—ã–µ –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è (—Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å)")
        print("   1.1.4 - –ó–≤–µ–∑–¥–æ—á–∫–∏ (*, **, ***) (—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ)")
        print("=" * 60)
        
        # –í–°–ï –ü–†–û–í–ï–†–ö–ò –ò–ó –¢–ó
        all_violations.extend(self.check_title_block_requirements(text_data))
        all_violations.extend(self.check_letter_designations_consistency(text_data))
        all_violations.extend(self.check_asterisk_consistency(text_data))
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats = {
            'total_violations': len(all_violations),
            'high_severity': len([v for v in all_violations if v['severity'] == 'high']),
            'medium_severity': len([v for v in all_violations if v['severity'] == 'medium']),
            'low_severity': len([v for v in all_violations if v['severity'] == 'low'])
        }
        
        print(f"\nüìä –ò–¢–û–ì–ò –ü–†–û–í–ï–†–ö–ò:")
        print(f"   –í—Å–µ–≥–æ –Ω–∞—Ä—É—à–µ–Ω–∏–π: {stats['total_violations']}")
        print(f"   –í—ã—Å–æ–∫–∞—è –≤–∞–∂–Ω–æ—Å—Ç—å: {stats['high_severity']}")
        print(f"   –°—Ä–µ–¥–Ω—è—è –≤–∞–∂–Ω–æ—Å—Ç—å: {stats['medium_severity']}")
        print(f"   –ù–∏–∑–∫–∞—è –≤–∞–∂–Ω–æ—Å—Ç—å: {stats['low_severity']}")
        
        # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞—Ä—É—à–µ–Ω–∏—è—Ö
        if all_violations:
            print(f"\nüìã –î–ï–¢–ê–õ–ò–ó–ê–¶–ò–Ø –ù–ê–†–£–®–ï–ù–ò–ô:")
            for i, violation in enumerate(all_violations, 1):
                print(f"   {i}. [{violation['severity'].upper()}] {violation['violation']}")
                if 'details' in violation:
                    print(f"      üìç {violation['details']}")
        else:
            print(f"\nüéâ –î–æ–∫—É–º–µ–Ω—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤—Å–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º—ã–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –¢–ó!")
        
        return {
            'violations': all_violations,
            'statistics': stats,
            'is_compliant': len(all_violations) == 0,
            'blocks_info': text_data.get('blocks', {})
        }

# =============================================================================
# FLASK APP
# =============================================================================

# Initialize analyzers
doc_analyzer = DocumentAnalyzer()
rule_engine = RuleEngine()

def allowed_file(filename):
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in {'pdf'}

def generate_red_pencil_report(analysis_result: dict) -> dict:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ '–ö—Ä–∞—Å–Ω—ã–π –∫–∞—Ä–∞–Ω–¥–∞—à'"""
    violations = analysis_result.get('violations', [])
    
    report = {
        'summary': {
            'total_issues': len(violations),
            'compliance_status': '–°–û–û–¢–í–ï–¢–°–¢–í–£–ï–¢' if len(violations) == 0 else '–ù–ï –°–û–û–¢–í–ï–¢–°–¢–í–£–ï–¢',
            'analysis_date': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        },
        'detailed_issues': [],
        'blocks_info': analysis_result.get('blocks_info', {})
    }
    
    for i, violation in enumerate(violations, 1):
        issue = {
            'issue_number': i,
            'rule_reference': violation.get('rule_id', 'N/A'),
            'rule_text': violation.get('rule_text', 'N/A'),
            'violation_description': violation.get('violation', 'N/A'),
            'location': violation.get('location', 'N/A'),
            'quote': violation.get('quote', ''),
            'severity': violation.get('severity', 'medium').upper(),
            'recommendation': generate_recommendation(violation)
        }
        report['detailed_issues'].append(issue)
    
    return report

def generate_recommendation(violation: dict) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é"""
    rule_id = violation.get('rule_id', '')
    
    recommendations = {
        '1.1.1_code_missing': '–î–æ–±–∞–≤—å—Ç–µ –∫–æ–¥ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –†–ù–ê–¢.301276.001–°–ë',
        '1.1.1_code_mismatch': '–ò–∑–º–µ–Ω–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –∫–æ–¥–æ–º',
        '1.1.1_unknown_code': '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–¥ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–∑ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞',
        '1.1.1_product_name': '–î–æ–±–∞–≤—å—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∏–∑–¥–µ–ª–∏—è –≤ –æ—Å–Ω–æ–≤–Ω—É—é –Ω–∞–¥–ø–∏—Å—å',
        '1.1.3_letters_only_in_drawing': '–î–æ–±–∞–≤—å—Ç–µ –±—É–∫–≤–µ–Ω–Ω—ã–µ –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è –≤ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ —É–¥–∞–ª–∏—Ç–µ –∏—Ö —Å —á–µ—Ä—Ç–µ–∂–∞',
        '1.1.3_letters_only_in_description': '–î–æ–±–∞–≤—å—Ç–µ –±—É–∫–≤–µ–Ω–Ω—ã–µ –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —á–µ—Ä—Ç–µ–∂ –∏–ª–∏ —É–¥–∞–ª–∏—Ç–µ –∏—Ö –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è',
        '1.1.3_letters_mismatch': '–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –±—É–∫–≤–µ–Ω–Ω—ã–µ –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è –æ–¥–∏–Ω–∞–∫–æ–≤—ã –≤ —á–µ—Ä—Ç–µ–∂–µ –∏ –æ–ø–∏—Å–∞–Ω–∏–∏',
        '1.1.4_single_mismatch': '–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–∏–Ω–æ—á–Ω—ã—Ö –∑–≤–µ–∑–¥–æ—á–µ–∫ (*) –æ–¥–∏–Ω–∞–∫–æ–≤–æ –≤ —á–µ—Ä—Ç–µ–∂–µ –∏ –æ–ø–∏—Å–∞–Ω–∏–∏',
        '1.1.4_double_mismatch': '–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–≤–æ–π–Ω—ã—Ö –∑–≤–µ–∑–¥–æ—á–µ–∫ (**) –æ–¥–∏–Ω–∞–∫–æ–≤–æ –≤ —á–µ—Ä—Ç–µ–∂–µ –∏ –æ–ø–∏—Å–∞–Ω–∏–∏',
        '1.1.4_triple_mismatch': '–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–æ–π–Ω—ã—Ö –∑–≤–µ–∑–¥–æ—á–µ–∫ (***) –æ–¥–∏–Ω–∞–∫–æ–≤–æ –≤ —á–µ—Ä—Ç–µ–∂–µ –∏ –æ–ø–∏—Å–∞–Ω–∏–∏'
    }
    
    return recommendations.get(rule_id, '–£—Å—Ç—Ä–∞–Ω–∏—Ç–µ –≤—ã—è–≤–ª–µ–Ω–Ω–æ–µ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏')

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/analyze', methods=['POST'])
def analyze_document():
    if 'file' not in request.files:
        return jsonify({'error': '–§–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω'}), 400
    
    file = request.files['file']
    if file.filename == '':
        return jsonify({'error': '–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω'}), 400
    
    if file and allowed_file(file.filename):
        filename = secure_filename(file.filename)
        file_path = os.path.join(app.config['UPLOAD_FOLDER'], f"{uuid.uuid4()}_{filename}")
        file.save(file_path)
        
        print(f"üîÑ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {file_path}")
        
        try:
            print(f"üîç –ù–∞—á–∞–ª–æ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–π–ª–∞: {filename}")
            
            # Step 1: Extract text with blocks
            print("üìÑ –í–´–ó–û–í extract_text_from_pdf –° –†–ê–ó–ë–ò–í–ö–û–ô –ù–ê –ë–õ–û–ö–ò...")
            text_data = doc_analyzer.extract_text_from_pdf(file_path)
            print("üìÑ extract_text_from_pdf –∑–∞–≤–µ—Ä—à–µ–Ω")
            
            # Prepare document data
            document_data = {
                'text_data': text_data,
                'metadata': {
                    'filename': filename,
                    'analysis_date': datetime.now().isoformat(),
                    'total_pages': text_data.get('total_pages', 0)
                }
            }
            
            # Step 2: Run rule checks
            print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª –∏–∑ –¢–ó...")
            analysis_result = rule_engine.run_all_checks(document_data)
            
            # Step 3: Generate report
            print("üìä –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞...")
            red_pencil_report = generate_red_pencil_report(analysis_result)
            
            # Clean up
            os.remove(file_path)
            
            print(f"üéâ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω. –ó–∞–º–µ—á–∞–Ω–∏–π: {len(analysis_result['violations'])}")
            
            return jsonify({
                'success': True,
                'analysis_result': analysis_result,
                'red_pencil_report': red_pencil_report,
                'document_metadata': document_data['metadata'],
                'blocks_info': text_data.get('blocks', {})
            })
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}")
            if os.path.exists(file_path):
                os.remove(file_path)
            return jsonify({'error': f'–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}'}), 500
    
    return jsonify({'error': '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞. –†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ PDF.'}), 400

@app.route('/report', methods=['POST'])
def generate_report():
    data = request.get_json()
    red_pencil_report = data.get('red_pencil_report')
    
    if not red_pencil_report:
        return jsonify({'error': 'No report data provided'}), 400
    
    # Generate downloadable report
    report_text = generate_text_report(red_pencil_report)
    
    return jsonify({
        'report_text': report_text,
        'download_url': '/download/report.txt'
    })

def generate_text_report(red_pencil_report: dict) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
    report_lines = []
    
    summary = red_pencil_report.get('summary', {})
    report_lines.append("=" * 60)
    report_lines.append("–û–¢–ß–ï–¢ –ù–û–†–ú–û–ö–û–ù–¢–†–û–õ–Ø (–ü–û –¢–ó)")
    report_lines.append("=" * 60)
    report_lines.append(f"–î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞: {summary.get('analysis_date', 'N/A')}")
    report_lines.append(f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–º–µ—á–∞–Ω–∏–π: {summary.get('total_issues', 0)}")
    report_lines.append(f"–°—Ç–∞—Ç—É—Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è: {summary.get('compliance_status', 'N/A')}")
    report_lines.append("")
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–ª–æ–∫–∞—Ö
    blocks_info = red_pencil_report.get('blocks_info', {})
    if blocks_info:
        report_lines.append("–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ë–õ–û–ö–ê–• –î–û–ö–£–ú–ï–ù–¢–ê:")
        report_lines.append("-" * 40)
        report_lines.append(f"–ß–µ—Ä—Ç–µ–∂: {len(blocks_info.get('drawing', ''))} —Å–∏–º–≤–æ–ª–æ–≤")
        report_lines.append(f"–û–ø–∏—Å–∞–Ω–∏–µ: {len(blocks_info.get('description', ''))} —Å–∏–º–≤–æ–ª–æ–≤")
        report_lines.append(f"–°—Ç—Ä—É–∫—Ç—É—Ä–∞: {len(blocks_info.get('structure', ''))} —Å–∏–º–≤–æ–ª–æ–≤")
        report_lines.append("")
    
    issues = red_pencil_report.get('detailed_issues', [])
    if issues:
        report_lines.append("–î–ï–¢–ê–õ–¨–ù–´–ï –ó–ê–ú–ï–ß–ê–ù–ò–Ø:")
        report_lines.append("-" * 60)
        
        for issue in issues:
            report_lines.append(f"{issue['issue_number']}. [{issue['severity']}] {issue['violation_description']}")
            report_lines.append(f"   –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {issue['location']}")
            report_lines.append(f"   –ù–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç: {issue['rule_reference']}")
            report_lines.append(f"   –¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ: {issue['rule_text']}")
            if issue['quote']:
                report_lines.append(f"   –¶–∏—Ç–∞—Ç–∞: {issue['quote']}")
            report_lines.append(f"   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {issue['recommendation']}")
            report_lines.append("")
    else:
        report_lines.append("–ó–ê–ú–ï–ß–ê–ù–ò–ô –ù–ï –í–´–Ø–í–õ–ï–ù–û")
        report_lines.append("–î–æ–∫—É–º–µ–Ω—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º")
    
    report_lines.append("=" * 60)
    report_lines.append("–ö–æ–Ω–µ—Ü –æ—Ç—á–µ—Ç–∞")
    
    return "\n".join(report_lines)

if __name__ == '__main__':
    print("üöÄ Starting NormControl System...")
    print("üìä Access the application at: http://localhost:5000")
    print("üîß Debug mode: ON")
    print(f"üìö PDF processing: {'PyMuPDF' if PYMUPDF_AVAILABLE else 'PDFPlumber' if PDFPLUMBER_AVAILABLE else 'OCR only'}")
    print("‚úÖ –ü—Ä–æ–≤–µ—Ä—è—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∏–∑ –¢–ó:")
    print("   1.1.1 - –û—Å–Ω–æ–≤–Ω–∞—è –Ω–∞–¥–ø–∏—Å—å (–∫–æ–¥ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ)")
    print("   1.1.3 - –ë—É–∫–≤–µ–Ω–Ω—ã–µ –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è (—Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å)")
    print("   1.1.4 - –ó–≤–µ–∑–¥–æ—á–∫–∏ (*, **, ***) (—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ)")
    print("=" * 60)
    app.run(host='0.0.0.0', port=5000, debug=True)